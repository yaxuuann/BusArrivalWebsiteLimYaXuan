import streamlit as st
import requests
import pandas as pd
from datetime import datetime, timedelta

# LTA DataMall API details
API_URL = "https://datamall2.mytransport.sg/ltaodataservice/v3/BusArrival"
ACCOUNT_KEY = "TcWqdsjZRBqj1mj/t1QNDg=="  # Replace with your LTA DataMall API key

# Title
st.title("Real-Time Bus Arrival Information")

# Function to fetch bus arrival data
def fetch_bus_arrival_data(bus_stop_code):
    headers = {"AccountKey": ACCOUNT_KEY}
    params = {"BusStopCode": bus_stop_code}
    response = requests.get(API_URL, headers=headers, params=params)
    
    # Debugging: Print the raw response
    print("Status Code:", response.status_code)
    print("Raw Response:", response.text)
    
    if response.status_code == 200:
        try:
            data = response.json()
            if "Services" in data:
                return data["Services"]
            else:
                st.error("No bus services found for this stop.")
                return None
        except requests.exceptions.JSONDecodeError:
            st.error("Invalid API response. Please check your API key or try again later.")
            return None
    else:
        st.error(f"API Error: {response.status_code} - {response.text}")
        return None

# Function to parse and format the data into a user-friendly layout
def parse_bus_arrival_data(services):
    bus_data = []
    for service in services:
        next_bus = service["NextBus"]
        
        # Convert "SD" to "Single Deck", "DD" to "Double Deck", etc.
        vehicle_type = next_bus["Type"]
        if vehicle_type == "SD":
            vehicle_type = "Single Deck"
        elif vehicle_type == "DD":
            vehicle_type = "Double Deck"
        elif vehicle_type == "BD":
            vehicle_type = "Bendy Bus"
        
        # Convert "WAB" to "Wheelchair Accessible"
        feature = next_bus["Feature"]
        if feature == "WAB":
            feature = "Wheelchair Accessible"
        
        # Convert "SEA" to "Seats Available", "SDA" to "Standing Available", etc.
        load = next_bus["Load"]
        if load == "SEA":
            load = "Seats Available"
        elif load == "SDA":
            load = "Standing Available"
        elif load == "LSD":
            load = "Limited Standing"
        
        # Convert ISO timestamp to a user-friendly format (e.g., "09:44 AM")
        estimated_arrival = next_bus["EstimatedArrival"]
        if estimated_arrival:
            estimated_arrival = datetime.fromisoformat(estimated_arrival.replace("Z", "+00:00")).astimezone()
            estimated_arrival_str = estimated_arrival.strftime("%I:%M %p")
        else:
            estimated_arrival_str = "Not Available"
            estimated_arrival = None
        
        bus_data.append({
            "Bus Number": service["ServiceNo"],
            "Estimated Arrival": estimated_arrival_str,
            "Estimated Arrival Time": estimated_arrival,
            "Load": load,
            "Feature": feature,
            "Vehicle Type": vehicle_type
        })
    return pd.DataFrame(bus_data)

# Function to get color based on load
def get_load_color(load):
    if load == "Seats Available":
        return "#4CAF50"  # Green
    elif load == "Standing Available":
        return "#FFC107"  # Yellow
    elif load == "Limited Standing":
        return "#F44336"  # Red
    else:
        return "#000000"  # Default black

# User input for bus stop code
bus_stop_code = st.text_input("Enter Bus Stop Code", "12101")

# Validate bus stop code and fetch data
if bus_stop_code:
    services = fetch_bus_arrival_data(bus_stop_code)
    if services:
        st.success(f"Bus Stop Code {bus_stop_code} is valid. Fetching real-time arrival times...")
        
        # Parse and format the data
        data = parse_bus_arrival_data(services)
        
        # Display bus arrival times in a card-like format
        st.write(f"Bus Arrival Times for Stop Code: {bus_stop_code}")
        
        # Use columns to create a grid layout
        cols = st.columns(2)  # Adjust the number of columns as needed
        
        for index, row in data.iterrows():
            with cols[index % 2]:  # Distribute cards across columns
                # Calculate time left until arrival
                if row["Estimated Arrival Time"]:
                    time_left = (row["Estimated Arrival Time"] - datetime.now().astimezone()).total_seconds() / 60  # Time left in minutes
                    time_left = max(0, int(time_left))  # Ensure time left is not negative
                else:
                    time_left = "N/A"
                
                # Get color for load
                load_color = get_load_color(row["Load"])
                
                # Display card with highlighted and enlarged time left
                st.markdown(
                    f"""
                    <div style="border: 1px solid #e0e0e0; border-radius: 10px; padding: 10px; margin: 10px 0;">
                        <h3>Bus {row['Bus Number']}</h3>
                        <p><b>Estimated Arrival:</b> {row['Estimated Arrival']}</p>
                        <p style="font-size: 24px; font-weight: bold; color: {load_color};"><b>Time Left:</b> {time_left} mins</p>
                        <p><b>Load:</b> {row['Load']}</p>
                        <p><b>Feature:</b> {row['Feature']}</p>
                        <p><b>Vehicle Type:</b> {row['Vehicle Type']}</p>
                    </div>
                    """,
                    unsafe_allow_html=True
                )
    else:
        st.error(f"Bus Stop Code {bus_stop_code} is invalid or no data available. Please enter a valid bus stop code.")
